<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QualisysExtensions</name>
    </assembly>
    <members>
        <member name="T:QualisysExtensions.Controls.Item">
            <summary>
                Modelo puente para los items del ComboBox
            </summary>
        </member>
        <member name="P:QualisysExtensions.Controls.Item.Id">
            <summary>
                Id
            </summary>
        </member>
        <member name="P:QualisysExtensions.Controls.Item.Name">
            <summary>
                Nombre
            </summary>
        </member>
        <member name="T:QualisysExtensions.Controls.ComboBoxExtension">
            <summary>
                Extensión para agilizar el trabajo con ComboBoxes
            </summary>
            <remarks>
                Raul Anaya, 19/12/2017
            </remarks>
        </member>
        <member name="M:QualisysExtensions.Controls.ComboBoxExtension.LoadDataSource(System.Windows.Forms.ComboBox,System.Collections.Generic.IList{QualisysExtensions.Controls.ComboItem})">
            <summary>
               Método para cargar una la lista de un ComboBox
            </summary>
            <param name="pObjComboBox">
                ComboBox
            </param>
            <param name="pLstObjDataSource">
                Lista
            </param>
        </member>
        <member name="M:QualisysExtensions.Controls.ComboBoxExtension.LoadDataSource``1(System.Windows.Forms.ComboBox)">
            <summary>
                Método para cargar un enum en el ComboBox
            </summary>
            <typeparam name="T">
                Enum
            </typeparam>
            <param name="pObjComboBox">
                ComboBox
            </param>
        </member>
        <member name="M:QualisysExtensions.Controls.ComboBoxExtension.GetComboItemListFromEnum``1">
            <summary>
                Método para convertir un enum en una lista para ComboBox
            </summary>
            <typeparam name="T">
                Enum
            </typeparam>
            <returns>
                Lista ComboBox
            </returns>
        </member>
        <member name="M:QualisysExtensions.Controls.ComboBoxExtension.GetComboItemListFromEnum``1(System.String)">
            <summary>
                Método para convertir un enum en una lista para ComboBox
            </summary>
            <typeparam name="T">
                Enum
            </typeparam>
            <param name="pStrDefaultItem">
                Item default
            </param>
            <returns>
                Lista para ComboBox
            </returns>
        </member>
        <member name="M:QualisysExtensions.Controls.ComboBoxExtension.GetComboItemListFromList``1(System.Collections.Generic.IList{``0})">
            <summary>
                Método para obtener una lista para ComboBox
            </summary>
            <param name="pUnkLstObjList">
                Lista de entidades
            </param>
            <returns>
                Lista para ComboBox
            </returns>
        </member>
        <member name="M:QualisysExtensions.Controls.ComboBoxExtension.GetComboItemListFromList``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
                Método para obtener una lista para ComboBox
            </summary>
            <param name="pUnkLstObjList">
                Lista de entidades
            </param>
            <param name="pStrDefaultItem">
                Item default
            </param>
            <returns>
                Lista para ComboBox
            </returns>
        </member>
        <member name="M:QualisysExtensions.Controls.ComboBoxExtension.IsValid(System.Windows.Forms.ComboBox)">
            <summary>
                Método para validar la sección de un ComboBox
            </summary>
            <param name="pObjCombo">
                ComboBox
            </param>
            <returns>
                Si es valido
            </returns>
        </member>
        <member name="M:QualisysExtensions.Controls.ComboBoxExtension.ReInitCombo(System.Windows.Forms.ComboBox,System.Int32,System.String)">
            <summary>
                Método para reiniciar el ComboBox
            </summary>
            <param name="pObjCombo">
                ComboBox
            </param>
            <param name="pIntId">
                Id
            </param>
            <param name="pStrName">
                Nombre
            </param>
            <returns></returns>
        </member>
        <member name="M:QualisysExtensions.Controls.ComboBoxExtension.GetIndexForCombo(System.Windows.Forms.ComboBox,System.Int32)">
            <summary>
                Método para obtener el índice de un id en el combo
            </summary>
            <param name="pObjCombo">
                ComboBox
            </param>
            <param name="pIntId">
                Id
            </param>
            <returns>
                Indíce
            </returns>
        </member>
        <member name="M:QualisysExtensions.Controls.ComboBoxExtension.LookForDisabledItem(System.Windows.Forms.ComboBox,System.Int32,System.String)">
            <summary>
                Método para buscar los items inválidos
            </summary>
            <param name="pObjCombo">
                ComboBox
            </param>
            <param name="pIntId">
                Id
            </param>
            <param name="pStrName">
                Nombre
            </param>
            <returns>
                Lista de items del ComboBox
            </returns>
        </member>
        <member name="M:QualisysExtensions.Controls.ComboBoxExtension.HaveDisabledItem(System.Windows.Forms.ComboBox)">
            <summary>
                Método que indica si un ComboBox tiene items inválidos.
            </summary>
            <param name="pObjCombo">
                ComboBox
            </param>
            <returns>
                Si es inválido
            </returns>
        </member>
        <member name="T:QualisysExtensions.Controls.ComboItem">
            <summary>
                Modelo para los items del ComboBox
            </summary>
        </member>
        <member name="P:QualisysExtensions.Controls.ComboItem.Value">
            <summary>
                Valor
            </summary>
        </member>
        <member name="P:QualisysExtensions.Controls.ComboItem.Text">
            <summary>
                Texto
            </summary>
        </member>
        <member name="T:QualisysExtensions.DataBase.DataBaseExtension">
            <summary>
                Extensión para la las clases que controlen el acceso a datos.
            </summary>
            <remarks>
                Raul Anaya, 18/12/2017
            </remarks>
        </member>
        <member name="M:QualisysExtensions.DataBase.DataBaseExtension.GetSQL(System.Object,System.String,System.String)">
            <summary>
                Método para obtener comandos sql.
            </summary>
            <param name="pObjCurrentObject">
                Clase u objeto que controla del acceso a datos.
            </param>
            <param name="pStrNamespace">
                Nombre de espacio del comando sql.
            </param>
            <param name="pStrResource">
                Nombre del comando sql.
            </param>
            <returns>
                Comando sql.
            </returns>
        </member>
        <member name="T:QualisysExtensions.Date.DateTimeExtension">
            <summary>
                Extensión para facilitar el uso de fechas
            </summary>
            <remarks>
                Raul Anaya, 09/01/2018
            </remarks>
        </member>
        <member name="M:QualisysExtensions.Date.DateTimeExtension.StartOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
                Método para obtener una fecha en un día se la semana específico
            </summary>
            <param name="pObjDateTime">
                Fecha
            </param>
            <param name="pObjStartOfWeek">
                Dia de la semana
            </param>
            <returns></returns>
        </member>
        <member name="T:QualisysExtensions.Enums.EnumExtension">
            <summary>
                Extensión para facilitar el trabajo con los enumeradores.
            </summary>
            <remarks>
                Raul Anaya, 18/12/2017
            </remarks>
        </member>
        <member name="M:QualisysExtensions.Enums.EnumExtension.GetDescription(System.Enum)">
            <summary>
                Método para obtener la descripción de un enumerador.
            </summary>
            <param name="pObjElement">
                Enumerador
            </param>
            <returns>
                Descripción
            </returns>
        </member>
        <member name="M:QualisysExtensions.Enums.EnumExtension.GetValueFromDescription``1(System.String)">
            <summary>
                Método para obtener el valor de un enumerador a partir de su descripción.
            </summary>
            <typeparam name="T">
                Tipo de enumerador
            </typeparam>
            <param name="pStrDescription">
                Descripción del enumerador
            </param>
            <returns>
                Enumerador
            </returns>
        </member>
        <member name="T:QualisysExtensions.Object.ObjectExtension">
            <summary>
                Extensión para facilitar el trabajo con objetos.
            </summary>
            <remarks>
                Raul Anaya, 18/12/2018
            </remarks>
        </member>
        <member name="M:QualisysExtensions.Object.ObjectExtension.Copy``1(``0)">
            <summary>
                Método para copiar un objeto.
            </summary>
            <typeparam name="T">
                Tipo de dato del objeto
            </typeparam>
            <param name="lObjSource">
                Objeto a copiar
            </param>
            <returns>
                Objeto copiado
            </returns>
        </member>
        <member name="M:QualisysExtensions.Object.ObjectExtension.CopyWithoutVirtualProperties``1(``0)">
            <summary>
                Método para copiar un objeto ignorado las propiedades virtuales, método ideal para evitar serializar referencias circulares y de gran volumen.
            </summary>
            <typeparam name="T">
                Tipo de dato del objeto
            </typeparam>
            <param name="lObjSource">
                Objeto a copiar
            </param>
            <returns>
                Objeto copiado
            </returns>
        </member>
        <member name="M:QualisysExtensions.Object.ObjectExtension.GetPropertyValue(System.Object,System.String)">
            <summary>
                Método para obtener el valor de la propiedad de un objeto.
            </summary>
            <param name="pObjCurrentObject">
                Objeto
            </param>
            <param name="pStrPropertyName">
                Nombre de la propiedad
            </param>
            <returns>
                Valor de la propiedad
            </returns>
        </member>
        <member name="M:QualisysExtensions.Object.ObjectExtension.GetPropertyValueByAttribute``1(System.Object)">
            <summary>
                Método para obtener el valor de una propiedad de un objeto, propiedad distinguida por un atributo.
            </summary>
            <typeparam name="T">
                Atributo
            </typeparam>
            <param name="pObjCurrentObject">
                Objeto
            </param>
            <returns>
                Valor de la propiedad
            </returns>
        </member>
        <member name="M:QualisysExtensions.Object.ObjectExtension.GetPropertyByAttribute``1(System.Object)">
            <summary>
                Método para obtener una propiedad de un objeto por un atributo.
            </summary>
            <typeparam name="T">
                Atributo
            </typeparam>
            <param name="pObjCurrentObject">
                Objeto
            </param>
            <returns>
                Propiedad
            </returns>
        </member>
        <member name="M:QualisysExtensions.Object.ObjectExtension.Parse``2(``0)">
            <summary>
                Método para convertir un objeto de un tipo de dato a otro.
            </summary>
            <typeparam name="T">
                Tipo de dato actual
            </typeparam>
            <typeparam name="U">
                Nuevo tipo de dato
            </typeparam>
            <param name="UnkObject">
                Objeto con el tipo de dato actual
            </param>
            <returns>
                Objeto con el nuevo tipo de dato
            </returns>
        </member>
        <member name="M:QualisysExtensions.Object.ObjectExtension.ParseList``2(System.Collections.Generic.IList{``0})">
            <summary>
                Métdo para convertir una lista de objetos de un tipo de dato a otro.
            </summary>
            <typeparam name="T">
                Tipo de dato actual
            </typeparam>
            <typeparam name="U">
                Nuevo tipo de dato
            </typeparam>
            <param name="pLstUnkObject">
                Lista de objetos con el tipo de dato actual
            </param>
            <returns>
                Lista de objetos con nuevo tipo de dato
            </returns>
        </member>
        <member name="M:QualisysExtensions.Object.ObjectExtension.ParseBySerialize``1(System.Object)">
            <summary>
                Método para convertir un objeto de un tipo a otro mediante serialización.
            </summary>
            <typeparam name="T">
                Nuevo tipo de dato
            </typeparam>
            <param name="pUnkObject">
                Objeto  
            </param>
            <returns>
                Objeto con nuevo tipo de dato
            </returns>
        </member>
        <member name="M:QualisysExtensions.Object.ObjectExtension.JsonSerialize(System.Object)">
            <summary>
                Método para serializar un objeto.
            </summary>
            <param name="pUnkObject">
                Objeto
            </param>
            <returns>
                Serialización
            </returns>
        </member>
        <member name="M:QualisysExtensions.Object.ObjectExtension.JsonDeserialize``1(System.String)">
            <summary>
                Método para deserializar un objeto.
            </summary>
            <typeparam name="T">
                Tipo de dato del objeto serializado
            </typeparam>
            <param name="pStrSource">
                Serialización
            </param>
            <returns>
                Objeto deserializado
            </returns>
        </member>
        <member name="M:QualisysExtensions.Object.ObjectExtension.DeepConvert``1(System.Object)">
            <summary>
                Convertir un objeto de un tipo a otro mediante el método de copíado de bits.
            </summary>
            <typeparam name="T">
                Nuevo tipo de dato
            </typeparam>
            <param name="pUnkSource">
                Objeto
            </param>
            <returns>
                Objeto con nuevo tipo de dato
            </returns>
        </member>
        <member name="T:QualisysExtensions.Security.Crc32">
            <summary>
            Implements a 32-bit CRC hash algorithm compatible with Zip etc.
            </summary>
            <remarks>
            Crc32 should only be used for backward compatibility with older file formats
            and algorithms. It is not secure enough for new applications.
            If you need to call multiple times for the same data either use the HashAlgorithm
            interface or remember that the result of one Compute call needs to be ~ (XOR) before
            being passed in as the seed for the next Compute call.
            </remarks>
        </member>
        <member name="T:QualisysExtensions.Security.Crc32Extension">
            <summary>
                Extensión para obtener Checksum Crc32
            </summary>
            <remarks>
                Raul Anaya, 02/01/2018
            </remarks>
        </member>
        <member name="F:QualisysExtensions.Security.Crc32Extension.mObjCrc32">
            <summary>
                Crc32
            </summary>
        </member>
        <member name="M:QualisysExtensions.Security.Crc32Extension.#cctor">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:QualisysExtensions.Security.Crc32Extension.ComputeChecksum(System.String)">
            <summary>
                Método para obtener checksum
            </summary>
            <param name="pStrText">
                Texto
            </param>
            <returns>
                Checksum
            </returns>
        </member>
        <member name="M:QualisysExtensions.Security.Crc32Extension.ComputeChecksumBytes(System.String)">
            <summary>
                Método para obtener checksum
            </summary>
            <param name="pStrText">
                Texto
            </param>
            <returns>
                Checksum en arreglo de bytes
            </returns>
        </member>
        <member name="T:QualisysExtensions.Security.EncryptionExtension">
            <summary>
                Extensión para encriptar y desencriptar
            </summary>
            <remarks>
                Raul Anaya, 02/01/2018
            </remarks>
        </member>
        <member name="M:QualisysExtensions.Security.EncryptionExtension.Encode(System.String,System.String)">
            <summary>
                Método para encriptar un texto
            </summary>
            <param name="pStrDecoded">
                Texto desencriptado
            </param>
            <param name="pStrKey">
                Contraseña
            </param>
            <returns>
                Texto encriptado
            </returns>
        </member>
        <member name="M:QualisysExtensions.Security.EncryptionExtension.Decode(System.String,System.String)">
            <summary>
                Método para desencriptar un texto
            </summary>
            <param name="pStrEncoded">
                Texto encriptado
            </param>
            <param name="pStrKey">
                Contraseña
            </param>
            <returns>
                Texto desencriptado
            </returns>
        </member>
        <member name="T:QualisysExtensions.String.StringExtension">
            <summary>
                Extensión para facilitar el uso de textos
            </summary>
            <remarks>
                Raul Anaya, 11/01/2018
            </remarks>
        </member>
        <member name="M:QualisysExtensions.String.StringExtension.RemoveDiacritics(System.String)">
            <summary>
                Método para quitar diacríticos
            </summary>
            <param name="pStrString">
                Texto
            </param>
            <returns>
                Texto normalizado
            </returns>
        </member>
        <member name="T:QualisysExtensions.String.StringInjectExtension">
            <summary>
                Extensión para inyectar datos a los strings
            </summary>
            <remarks>
                Raul Anaya, 18/12/2017
            </remarks>
        </member>
        <member name="M:QualisysExtensions.String.StringInjectExtension.Inject(System.String,System.Object)">
            <summary>
            Extension method that replaces keys in a string with the values of matching object properties.
            <remarks>Uses <see cref="!:String.Format()"/> internally; custom formats should match those used for that method.</remarks>
            </summary>
            <param name="formatString">The format string, containing keys like {foo} and {foo:SomeFormat}.</param>
            <param name="injectionObject">The object whose properties should be injected in the string</param>
            <returns>A version of the formatString string with keys replaced by (formatted) key values.</returns>
        </member>
        <member name="M:QualisysExtensions.String.StringInjectExtension.Inject(System.String,System.Collections.IDictionary)">
            <summary>
            Extension method that replaces keys in a string with the values of matching dictionary entries.
            <remarks>Uses <see cref="!:String.Format()"/> internally; custom formats should match those used for that method.</remarks>
            </summary>
            <param name="formatString">The format string, containing keys like {foo} and {foo:SomeFormat}.</param>
            <param name="dictionary">An <see cref="T:System.Collections.IDictionary"/> with keys and values to inject into the string</param>
            <returns>A version of the formatString string with dictionary keys replaced by (formatted) key values.</returns>
        </member>
        <member name="M:QualisysExtensions.String.StringInjectExtension.Inject(System.String,System.Collections.Hashtable)">
            <summary>
            Extension method that replaces keys in a string with the values of matching hashtable entries.
            <remarks>Uses <see cref="!:String.Format()"/> internally; custom formats should match those used for that method.</remarks>
            </summary>
            <param name="formatString">The format string, containing keys like {foo} and {foo:SomeFormat}.</param>
            <param name="attributes">A <see cref="T:System.Collections.Hashtable"/> with keys and values to inject into the string</param>
            <returns>A version of the formatString string with hastable keys replaced by (formatted) key values.</returns>
        </member>
        <member name="M:QualisysExtensions.String.StringInjectExtension.InjectSingleValue(System.String,System.String,System.Object)">
            <summary>
            Replaces all instances of a 'key' (e.g. {foo} or {foo:SomeFormat}) in a string with an optionally formatted value, and returns the result.
            </summary>
            <param name="formatString">The string containing the key; unformatted ({foo}), or formatted ({foo:SomeFormat})</param>
            <param name="key">The key name (foo)</param>
            <param name="replacementValue">The replacement value; if null is replaced with an empty string</param>
            <returns>The input string with any instances of the key replaced with the replacement value</returns>
        </member>
        <member name="M:QualisysExtensions.String.StringInjectExtension.GetPropertyHash(System.Object)">
            <summary>
            Creates a HashTable based on current object state.
            <remarks>Copied from the MVCToolkit HtmlExtensionUtility class</remarks>
            </summary>
            <param name="properties">The object from which to get the properties</param>
            <returns>A <see cref="T:System.Collections.Hashtable"/> containing the object instance's property names and their values</returns>
        </member>
    </members>
</doc>
